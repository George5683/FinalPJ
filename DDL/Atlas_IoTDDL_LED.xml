<Atlas_IoTDDL>
	<Atlas_Thing>
		<Descriptive_Metadata>
			<Thing_ATID>RPI-1000</Thing_ATID>
			<Thing_Name>RPI-1000</Thing_Name>
			<Thing_Owner>Nathan</Thing_Owner>
			<Thing_Vendor>MC</Thing_Vendor>
			<Thing_Model>MC</Thing_Model>
			<Thing_ReleaseDate>8/2020</Thing_ReleaseDate>
			<Thing_Type>Thing of Things</Thing_Type>
			<Thing_OperatingSystem>Raspbian</Thing_OperatingSystem>
			<Thing_ShortDescription></Thing_ShortDescription>
			<LongDescription></LongDescription>
			<Thing_SSID>Final</Thing_SSID>
			<Space_Coordinates></Space_Coordinates>
			<Space_Name>Classroom</Space_Name>
			<Space_Description></Space_Description>
			<Space_Constraints>
				<Temperature>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Temperature>
				<Humidity>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Humidity>
				<Voltage>
					<Lower_Bound></Lower_Bound>
					<Upper_Bound></Upper_Bound>
				</Voltage>
				<Radio_Interference_Radius></Radio_Interference_Radius>
				<Safe_Temperature_Radius></Safe_Temperature_Radius>
			</Space_Constraints>
		</Descriptive_Metadata>
		<Administrative_Metadata>
			<Network_Manager>
				<Module>WiFi</Module>
				<Type>Built-In</Type>
				<Network_Name>ProgressLand-5G</Network_Name>
				<Network_Passcode>sillyhippo402</Network_Passcode>
				<MulticastGroup>
					<IP>232.1.1.1</IP>
					<Port>1235</Port>
				</MulticastGroup>
				<Communication_Protocol>Sockets</Communication_Protocol>
				<InterOperableCommunication>
					<Broker>
						<Vendor>HiveMQ</Vendor>
						<Dashboard>http://www.mqtt-dashboard.com/</Dashboard>
						<IP>broker.hivemq.com</IP>
						<Port>1883</Port>
					</Broker>
					<Topic>
						<Root>/Atlas</Root>
						<Network_MQTTClient>/Network/MQTT_Client</Network_MQTTClient>
						<Network_PrivateBroker>/Network/Private_Broker</Network_PrivateBroker>
						<Multicast_ThingIdentity>/Multicast/Tweet_ThingIdentity</Multicast_ThingIdentity>
						<Multicast_EntityIdentity>/Multicast/Tweet_EntityIdentity</Multicast_EntityIdentity>
						<Multicast_API>/Multicast/API</Multicast_API>
						<Unicast>/Unicast/Interaction</Unicast>
					</Topic>
				</InterOperableCommunication>
				<OMA_DM>
					<AccessName>Eclipse Leshan</AccessName>
					<IP>coap://leshan.eclipseprojects.io</IP>
					<Port>5683</Port>
				</OMA_DM>
			</Network_Manager>
			<Memory_Manager>
				<Store_Format></Store_Format>
				<MemoryUnit_Application></MemoryUnit_Application>
				<MemoryUnit_Knowledge></MemoryUnit_Knowledge>
			</Memory_Manager>
		</Administrative_Metadata>
		<Thing_Attachment>

		</Thing_Attachment>
		<Structural_Metadata>
			<Number_Hardware>1</Number_Hardware>
			<Number_Software>0</Number_Software>
			<Number_Hybrid>0</Number_Hybrid>
			<Number_Entities>1</Number_Entities>
		</Structural_Metadata>
	</Atlas_Thing>
	<Atlas_Entities>
		<Entity_1>
			<Descriptive_Metadata>
				<ID>RPI-LED</ID>
				<Name>LED</Name>
				<Owner>Nathan</Owner>
				<Vendor>MC</Vendor>
				<Category>Hardware</Category>
				<Type>Connected</Type>
				<Description></Description>
			</Descriptive_Metadata>
			<Services>
				<Service_1>
					<Name>LEDON</Name>
					<AppCategory>Lighting</AppCategory>
					<Type>Action</Type>
					<Keywords>LED,ON</Keywords>
					<Description>Turns the LED on</Description>
					<Contextual_Constraints>
						<Time_Window>30seconds</Time_Window>
						<Usage_Mode></Usage_Mode>
						<Concurrent></Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime>6am</StartTime>
							<EndTime>10pm</EndTime>
						</Working>
						<Callable>
							<StartTime>6:30am</StartTime>
							<EndTime>9:30pm</EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription>Output</OutputDescription>
					<OutputType>int</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type

if(Input == 1){
    DigitalWrite_High(17);
    Output = 1;
}
else{
    Output = 0;
}
]]></Service_Formula>
					<Service_NumberInputs>1</Service_NumberInputs>
					<Service_InputTypes>int</Service_InputTypes>
					<Service_InputDescriptions>"Input"</Service_InputDescriptions>
				</Service_1>
				<Service_2>
					<Name>LEDOFF</Name>
					<AppCategory>Lighting</AppCategory>
					<Type>Action</Type>
					<Keywords>LED,OFF</Keywords>
					<Description>Turning off the LED</Description>
					<Contextual_Constraints>
						<Time_Window>30seconds</Time_Window>
						<Usage_Mode></Usage_Mode>
						<Concurrent></Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime>6am</StartTime>
							<EndTime>10pm</EndTime>
						</Working>
						<Callable>
							<StartTime>6:30am</StartTime>
							<EndTime>9:30pm</EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription>Output</OutputDescription>
					<OutputType>int</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type

if(Input == 1){
    DigitalWrite_Low(17);
    Output = 1;
}
else{
    Output = 0;
}

]]></Service_Formula>
					<Service_NumberInputs>1</Service_NumberInputs>
					<Service_InputTypes>int</Service_InputTypes>
					<Service_InputDescriptions>"Input"</Service_InputDescriptions>
				</Service_2>
				<Service_3>
					<Name>LEDChange</Name>
					<AppCategory>Lighting</AppCategory>
					<Type>Action</Type>
					<Keywords>LED,Change</Keywords>
					<Description>If LED is on, turn off and vice versa</Description>
					<Contextual_Constraints>
						<Time_Window>30seconds</Time_Window>
						<Usage_Mode></Usage_Mode>
						<Concurrent></Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime>6am</StartTime>
							<EndTime>10pm</EndTime>
						</Working>
						<Callable>
							<StartTime>6:30am</StartTime>
							<EndTime>9:30pm</EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription>Output</OutputDescription>
					<OutputType>int</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type
int value = DigitalRead(17);

if(Input == 1){
    if(value == 0){
        DigitalWrite_High(17);
        Output = 1;
    }
    else if(value == 1){
        DigitalWrite_Low(17);
        Output = 1;
    }
}
else{
    Output = 0;
}
]]></Service_Formula>
					<Service_NumberInputs>1</Service_NumberInputs>
					<Service_InputTypes>int</Service_InputTypes>
					<Service_InputDescriptions>"Input"</Service_InputDescriptions>
				</Service_3>
				<Service_4>
					<Name>LEDStatus</Name>
					<AppCategory>Lighting</AppCategory>
					<Type>Action</Type>
					<Keywords>LED,Status</Keywords>
					<Description>Check if its ON or OFF</Description>
					<Contextual_Constraints>
						<Time_Window>30seconds</Time_Window>
						<Usage_Mode></Usage_Mode>
						<Concurrent></Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime>6am</StartTime>
							<EndTime>10pm</EndTime>
						</Working>
						<Callable>
							<StartTime>6:30am</StartTime>
							<EndTime>9:30pm</EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription>Output</OutputDescription>
					<OutputType>int</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type

if(Input == 1){
    Output = DigitalRead(17);
    
}
else{
    Output = 0
}
]]></Service_Formula>
					<Service_NumberInputs>1</Service_NumberInputs>
					<Service_InputTypes>int</Service_InputTypes>
					<Service_InputDescriptions>"Input"</Service_InputDescriptions>
				</Service_4>
				<Service_5>
					<Name>LEDGREEN</Name>
					<AppCategory>Lighting</AppCategory>
					<Type>Action</Type>
					<Keywords>LED,Green</Keywords>
					<Description>Turn on LED GREEN</Description>
					<Contextual_Constraints>
						<Time_Window>30seconds</Time_Window>
						<Usage_Mode></Usage_Mode>
						<Concurrent></Concurrent>
					</Contextual_Constraints>
					<Temporal_Constraints>
						<Working>
							<StartTime>6am</StartTime>
							<EndTime>10pm</EndTime>
						</Working>
						<Callable>
							<StartTime>6:30am</StartTime>
							<EndTime>9:30pm</EndTime>
						</Callable>
					</Temporal_Constraints>
					<OutputDescription>Output</OutputDescription>
					<OutputType>int</OutputType>
					<Service_Formula><![CDATA[
// ~ Service body C/C++ code block ~
// You can use the inputs you defined above by name
// Any return values should match the specified output type


DigitalWrite_High(27);
Output = 1;
]]></Service_Formula>
					<Service_NumberInputs>0</Service_NumberInputs>
					<Service_InputTypes></Service_InputTypes>
					<Service_InputDescriptions></Service_InputDescriptions>
				</Service_5>
				<Number_Services>5</Number_Services>
			</Services>
			<Relationships>
				<Relationship_1>
					<Name>LEDChange then GREEN</Name>
					<Establisher>Nathan</Establisher>
					<Description>Turn Green on if change is called</Description>
					<type>control</type>
					<Input1>LEDChange</Input1>
					<Input2>LEDGREEN</Input2>
				</Relationship_1>
				<Number_Relationships>1</Number_Relationships>
			</Relationships>
			<UnboundedService>
				<Number_UnboundedServices>0</Number_UnboundedServices>
			</UnboundedService>
		</Entity_1>
	</Atlas_Entities>
</Atlas_IoTDDL>